<script type="text/javascript">
    mxBasePath = 'Scripts/mxGraph';
</script>
<script type="text/javascript" src="@Url.Content("~/Scripts/mxGraph/js/mxClient.js")"></script>
<script type="text/javascript">
    function main() {
        // Checks if browser is supported
        if (!mxClient.isBrowserSupported()) {
            // Displays an error message if the browser is
            // not supported.
            mxUtils.error('Browser is not supported!', 200, false);
        }
        else {
            // Defines an icon for creating new connections in the connection handler.
            // This will automatically disable the highlighting of the source vertex.
            mxConnectionHandler.prototype.connectImage = new mxImage('Scripts/mxGraph/images/connector.gif', 16, 16);

            // Creates the div for the toolbar
            var tbContainer = document.createElement('div');
             document.getElementById("toolbarMenu").appendChild(tbContainer);

            // Creates new toolbar without event processing
            var toolbar = new mxToolbar(tbContainer);
            toolbar.enabled = false

            // Creates the div for the graph
            var container = document.createElement('div');
            document.getElementById("graphContainer").appendChild(container);

            // Workaround for Internet Explorer ignoring certain styles
            if (mxClient.IS_QUIRKS) {
                document.body.style.overflow = 'hidden';
                new mxDivResizer(tbContainer);
                new mxDivResizer(container);
            }

            // Creates the model and the graph inside the container
            // using the fastest rendering available on the browser
            var editor = new mxEditor();
            editor.setGraphContainer(container);
            var graph = editor.graph;
            // Enables new connections in the graph
            graph.setConnectable(true);
            graph.setMultigraph(true);
            //graph.setAutoSizeCells(true);
            graph.setPanning(true);
            graph.panningHandler.useLeftButtonForPanning = true;
            mxGraphHandler.prototype.removeCellsFromParent = false;
            var style = graph.getStylesheet().getDefaultEdgeStyle();
            style[mxConstants.STYLE_EDGE] = mxEdgeStyle.OrthConnector;
            style[mxConstants.STYLE_OVERFLOW] = true;
            
            
           
            graph.isWrapping = function (cell) {
                return true;
            };

            // Stops editing on enter or escape keypress
            var keyHandler = new mxKeyHandler(graph);
            var rubberband = new mxRubberband(graph);
            
            graph.isCellEditable = function (cell) {
                return !this.getModel().isEdge(cell);
            };

            graph.isCellMovable = function (cell) {

                return cell.getChildCount() != 0;
            }

            mxGraphModel.prototype.remove = function (a) {
                if (a.isVertex()) {
                    if (a.getChildCount() != 0) {
                        a == this.root ? this.setRoot(null) : this.getParent(a) != null && this.execute(new mxChildChange(this, null, a));
                        return a
                    }
                } else {
                    a == this.root ? this.setRoot(null) : this.getParent(a) != null && this.execute(new mxChildChange(this, null, a));
                    return a
                }


            }
            graph.collapseToPreferredSize = false;

            mxVertexHandler.prototype.resizeCell = function (cell, dx, dy, index, gridEnabled) {
                if (!cell.isCollapsed()) {

                    var parent = cell;
                    if (cell.getChildCount() == 0) {
                        var geo0 = graph.model.getGeometry(cell);
                        geo0 = geo0.clone();
                        geo0.height += dy;
                        graph.model.setGeometry(cell, geo0);
                        parent = cell.getParent();
                    }
                    var geo = graph.model.getGeometry(parent);
                    var geo1 = graph.model.getGeometry(parent.getChildAt(0));
                    var geo2 = graph.model.getGeometry(parent.getChildAt(1));
                    var geo3 = graph.model.getGeometry(parent.getChildAt(2));
                    geo = geo.clone();
                    geo1 = geo1.clone();
                    geo2 = geo2.clone();
                    geo3 = geo3.clone();
                    var a = geo.width + dx;
                    geo1.width = a;
                    geo2.width = a;
                    geo2.y = geo1.height;
                    geo3.width = a;
                    geo3.y = geo1.height + geo2.height;
                    geo.width = a;
                    geo.height = geo1.height + geo2.height + geo3.height
                    graph.model.setGeometry(parent, geo);
                    graph.model.setGeometry(parent.getChildAt(0), geo1);
                    graph.model.setGeometry(parent.getChildAt(1), geo2);
                    graph.model.setGeometry(parent.getChildAt(2), geo3);
                }
            }

            graph.convertValueToString = function (cell) {
                if (cell.isVertex()) {
                    if (cell.getChildCount() == 0) {
                        //                        var parent = cell.getParent();
                        //                        var v1 = parent.getChildAt(0);
                        //                        var v2 = parent.getChildAt(1);
                        //                        var v3 = parent.getChildAt(2);
                        //                        v1.value = part1 + part2;
                        //                        v2.value = n[1];
                        //                        v3.value = n[2];
                        return cell.value;
                    } else {
                        var str = cell.value + "";
                        var n = str.split("#");
                        n[0] = n[0].replace("&amp;", "&");

                        var geometry = this.model.getGeometry(cell);
                        var fontSize = style[mxConstants.STYLE_FONTSIZE] || mxConstants.DEFAULT_FONTSIZE;
                        var max = geometry.width / (fontSize * 0.625);
                        //parsing
                        var part1 = "";
                        var part2 = n[0];

                        while (max < part2.length) {
                            var x = part2.split(" ");
                            if (x.length == 1) {
                                part1 += part2.substring(0, max) + "\n";
                                part2 = part2.substring(max + 1, part2.length);
                            } else {
                                var charat = max;
                                while (part2.charAt(charat) != ' ') {
                                    charat--;
                                }
                                part1 += part2.substring(0, charat) + "\n";
                                part2 = part2.substring(charat + 1, part2.length);

                            }
                        }
                        if (n[1] == null || n[1] == "null") {
                            n[1] = "";
                        }

                        var v1 = cell.getChildAt(0);
                        var v2 = cell.getChildAt(1);
                        var v3 = cell.getChildAt(2);
                        v1.value = part1 + part2;
                        v2.value = n[1];
                        v3.value = n[2];
                        return "\n" + part1 + part2 + "\n\n" + n[1] + "\n\n" + n[2];
                    }


                }
                else {
                    return "";
                }
            };

                //addcommand
                var clear = function (editor) {
                    editor.graph.getModel().clear();
                }
                editor.addAction('clear', clear);

                var save = function (editor) {
                    var scale = 1;
                    var bounds = editor.graph.getGraphBounds();

                    // Creates XML node to hold output
                    var xmlDoc = mxUtils.createXmlDocument();
                    var root = xmlDoc.createElement('output');
                    xmlDoc.appendChild(root);

                    // Creates interface for rendering output
                    var xmlCanvas = new mxXmlCanvas2D(root);
                    xmlCanvas.scale(scale);
                    xmlCanvas.translate(Math.round(-bounds.x * scale), Math.round(-bounds.y * scale));

                    // Renders output to interface
                    var imgExport = new mxImageExport();
                    imgExport.drawState(editor.graph.getView().getState(editor.graph.model.root), xmlCanvas);

                    // Puts request data together
                    var filename = 'export.png';
                    var format = 'png';
                    var bg = '#ffffff';
                    var w = Math.round((bounds.width + 4) * scale);
                    var h = Math.round((bounds.height + 4) * scale);
                    var xml = mxUtils.getXml(root);
                    var enc = new mxCodec();
                    var node = enc.encode(editor.graph.getModel());
                    var xmlSaveFile = mxUtils.getPrettyXml(node);
                    $.post("Employee/ProcessRequest", { filename: filename, format: format, bg: bg, w: w, h: h, xml: encodeURIComponent(xml), "xmlSave": encodeURIComponent(xmlSaveFile) }, function (data) {

                    });
                };
                editor.addAction('Save', save);

                var load = function (editor) {
                    editor.graph.getModel().clear();
                    $.post("Employee/getXml", "", function (data) {
                        var xml = data;
                        var doc = mxUtils.parseXml(xml);
                        var dec = new mxCodec(doc);
                        dec.decode(doc.documentElement, editor.graph.getModel());
                        
                    });
                    

                };
                editor.addAction('load', load);

                

                //add button
                var node = document.getElementById('graphMenu');
                var buttons = ['Load','Clear', 'Delete', 'Undo', 'Redo','Save'];

                for (var i = 0; i < buttons.length; i++) {
                    var button = document.createElement('button');
                                
                    mxUtils.write(button, buttons[i]);

                    var factory = function (name) {

                        return function () {
                            editor.execute(name);
                        };
                    };
                    if (buttons[i] == "Save") {
                        mxEvent.addListener(button, 'click', factory(buttons[i]));
                    
                    } else {
                        mxEvent.addListener(button, 'click', factory(buttons[i].toLowerCase()));
                    
                    }
                    node.appendChild(button);
                }

                //add rectangle
                var addVertex = function (icon, w, h, style) {
                    var vertex = new mxCell(null, new mxGeometry(0, 0, w, h), style);
                    vertex.setVertex(true);

                    var img = addToolbarItem(graph, toolbar, vertex, icon);
                    img.enabled = true;

                    graph.getSelectionModel().addListener(mxEvent.CHANGE, function () {
                        var tmp = graph.isSelectionEmpty();
                        mxUtils.setOpacity(img, (tmp) ? 100 : 20);
                        img.enabled = tmp;
                    });
                };
                addVertex('Scripts/mxGraph/images/rectangle.gif', 100, 50, '');


            graph.getSelectionModel().addListener(mxEvent.CHANGE, function (sender, evt) {
                selectionChanged(graph);
            });
            
        }
    }

    function selectionChanged(graph) {

        var div = document.getElementById('properties');

        // Forces focusout in IE
        graph.container.focus();

        // Clears the DIV the non-DOM way
//        div.innerHTML = '';

        // Gets the selection cell
        var cell = graph.getSelectionCell();
        if(cell==null){
            $("#properties").hide();
            //mxUtils.writeln(div, 'Nothing selected.');
        }
        else if (cell.isVertex()) {
            if(cell.getChildCount() == 0){
                cell = cell.getParent();
            }
            $("#properties").show();
            // Creates the form from the attributes of the user object
            var form = new mxForm();
            var attrs = cell.value;
            $('.undefined').remove();
            if (attrs != null) {
                var split = attrs.split("#");
                var newJabatan = split[0].replace("&amp;", "&");
                $("#jabatan").val(newJabatan);
                $.post("Employee/GetNameListFromJabatan", { jabatan: newJabatan }, function (data) {
                    var selectedValues = [];
                    $("#editUser option").each(function () {
                        selectedValues.push($(this).val());
                    });
                    if (selectedValues.length != 0) {
                        for (var i = 0; i < selectedValues.length; i++) {
                            $("#editUser option[value='" + selectedValues[i] + "']").remove();
                        }
                    }
                    var get = "";
                    $.each(data, function (index, value) {

                        get += "<option value='" + value.nama + "'>" + value.nama + "</option>";
                    });
                    $("#editUser").append(get);
                    $("#editUser").val(split[1]);
                });
                
                $("#userPJS").val(split[2]);
                

                createComboBox(graph, form, cell);
                div.appendChild(form.getTable());

                $("#properties input").hide();
            } else {
                $("#jabatan").val("");
                var selectedValues = [];
                $("#editUser option").each(function () {
                    selectedValues.push($(this).val());
                });
                if (selectedValues.length != 0) {
                    for (var i = 0; i < selectedValues.length; i++) {
                        $("#editUser option[value='" + selectedValues[i] + "']").remove();
                    }
                }
                $("#editUser").val("");
                $("#userPJS").val("");
                createComboBox(graph, form, cell);
                div.appendChild(form.getTable());
            }
            
        }else{
            $("#properties").hide();
             //mxUtils.writeln(div, 'Nothing selected.');
        }
       
    }

    function createComboBox(graph, form, cell) {

        var applyHandler = function () {

                graph.getModel().beginUpdate();

                try {
                    cell.value = $("#jabatan").val() + "#" + $("#editUser").val() + "#" + $("#userPJS").val();
                    var edit = new mxCellAttributeChange(
             		                           cell, "a", cell.value);
                    graph.getModel().execute(edit);
                }
                finally {
                    graph.getModel().endUpdate();
                }
            };
            
            var cancelEdit = function () {
                $("#properties").hide();

                
            }
            var button = form.addButtons(applyHandler, cancelEdit);
        

        if (mxClient.IS_IE) {
            mxEvent.addListener(input, 'focusout', applyHandler);
        }
        else {
            // Note: Known problem is the blurring of fields in
            // Firefox by changing the selection, in which case
            // no event is fired in FF and the change is lost.
            // As a workaround you should use a local variable
            // that stores the focused field and invoke blur
            // explicitely where we do the graph.focus above.
        }
    }

    function addToolbarItem(graph, toolbar, prototype, image) {
        // Function that is executed when the image is dropped on
        // the graph. The cell argument points to the cell under
        // the mousepointer if there is one.
        var funct = function (graph, evt, cell, x, y) {
            graph.stopEditing(false);

            var vertex = graph.getModel().cloneCell(prototype);
            var v1 = graph.insertVertex(vertex, null, '', 0, 0, vertex.geometry.width, 30, 'fillColor=#e6e7e9');
            var v2 = graph.insertVertex(vertex, null, '', 0, 30, vertex.geometry.width, 30, 'fillColor=#a8a9ad;fontColor=#ffffff');
            var v3 = graph.insertVertex(vertex, null, '', 0, 60, vertex.geometry.width, 30, 'fillColor=#949599;fontColor=#ffffff');
            vertex.geometry.x = x;
            vertex.geometry.y = y;

            graph.addCell(vertex);
            graph.setSelectionCell(vertex);
        }

        // Creates the image which is used as the drag icon (preview)
        var img = toolbar.addMode(null, image, function (evt, cell) {
            var pt = this.graph.getPointForEvent(evt);
            funct(graph, evt, cell, pt.x, pt.y);
        });

        // Disables dragging if element is disabled. This is a workaround
        // for wrong event order in IE. Following is a dummy listener that
        // is invoked as the last listener in IE.
        mxEvent.addListener(img, 'mousedown', function (evt) {
            // do nothing
        });

        // This listener is always called first before any other listener
        // in all browsers.
        mxEvent.addListener(img, 'mousedown', function (evt) {
            if (img.enabled == false) {
                mxEvent.consume(evt);
            }
        });

        mxUtils.makeDraggable(img, graph, funct);

        return img;
    }

    $(document).ready(function () {
        $.post("Employee/GetUserOrganization", "", function (data) {
            var get = "";
            $.each(data, function (index, value) {
                get += '<option value="' + value.nama + '">' + value.nama + '</option>';
            });

            $("#userPJS").append(get);

        });

        $.post("Employee/GetListJabatan", "", function (data) {
            var get = "";
            $.each(data, function (index, value) {
                get += '<option value="' + value.jabatan + '">' + value.jabatan + '</option>';
            });

            $("#jabatan").append(get);

        });


        $("#jabatan").bind("change", function () {
            var jab = $("#jabatan").val();
            $.post("Employee/GetNameListFromJabatan", { jabatan: jab }, function (data) {
                var selectedValues = [];
                $("#editUser option").each(function () {
                    selectedValues.push($(this).val());
                });
                if (selectedValues.length != 0) {
                    for (var i = 0; i < selectedValues.length; i++) {
                        $("#editUser option[value='" + selectedValues[i] + "']").remove();
                    }
                }
                var get = "";
                $.each(data, function (index, value) {

                    get += "<option value='" + value.nama + "'>" + value.nama + "</option>";
                });
                $("#editUser").append(get);
            });
        });

        main();
    });
</script>
<div id ="graphMenu">
</div>

<div style="overflow:hidden; background-color:White">
    <div id="toolbarMenu" style="float:left;"></div>
    <div id="graphContainer" style="float:left;overflow:hidden;width:100%;height:100%;"> </div>
    <div id="properties" style="display:none;z-index:3000;border: solid 1px black;float:left;position:absolute;left:800px;top:auto;background-color:White;word-wrap:break-word;">
    <span style="color:Black;">Edit User</span><br />
    <table>
        
        <tr>
            <td style="color:Black;">Jabatan :</td>
            <td><select name="jabatan" id ="jabatan" style="width:150px;height:20px;">
                    
                </select>
            </td>
        </tr>
        <tr>            
            <td style="color:Black;">Nama :</td>
            <td>
                <select name="editUser" id ="editUser" style="width:150px;height:20px;">
                    <option value ="">---</option>
                </select>
            </td>
        </tr>
        <tr>
            <td style="color:Black;">PJS :</td>
            <td>
                <select name="userPJS" id ="userPJS" style="width:150px;height:20px;">
                    <option value ="">---</option>
                </select>
            </td>
        </tr>
    </table>
    
</div>
</div>